/*
 Generated by Claude Sonnet
*/
#ifndef MUNIT_H
#define MUNIT_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

// Test function type
typedef void (*MunitTestFunc)(void);

// Test case structure
typedef struct {
    const char* name;
    MunitTestFunc test;
} MunitTest;

// Test suite structure
typedef struct {
    const char* name;
    MunitTest* tests;
} MunitSuite;

// Assertion macros
#define munit_assert(condition, message) do { \
    if (!(condition)) { \
        printf("Assertion failed: %s\n", message); \
        exit(1); \
    } \
} while (0)

#define munit_assert_double_equal(actual, expected, message) do { \
    if (fabs((actual) - (expected)) > 0.00001) { \
        printf("Assertion failed: %s\nExpected: %f\nActual: %f\n", \
               message, (double)(expected), (double)(actual)); \
        exit(1); \
    } \
} while (0)

// Test case macros
#define munit_case(type, name, body) void name(void) body

// Test creation helper
#define munit_test(name, func) { name, func }
#define munit_null_test { NULL, NULL }

// Suite creation and runner functions
MunitSuite munit_suite(const char* name, MunitTest* tests);
MunitTest* munit_suite_get_tests(MunitSuite* suite);
int munit_suite_main(MunitSuite* suite, void* user_data, int argc, char* const* argv);

#endif // MUNIT_H
