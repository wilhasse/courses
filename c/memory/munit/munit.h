/*
 Generated by Claude Sonnet
*/
#ifndef MUNIT_H
#define MUNIT_H

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

// Test case types
#define RUN 1
#define SUBMIT 2

// Test function type
typedef void (*MunitTestFunc)(void);

// Test case structure
typedef struct {
    const char* name;
    MunitTestFunc test;
} MunitTest;

// Test suite structure
typedef struct {
    const char* name;
    MunitTest* tests;
} MunitSuite;

// Assertion macros
#define munit_assert(condition, message) do { \
    if (!(condition)) { \
        printf("Assertion failed: %s\n", message); \
        exit(1); \
    } \
} while (0)

// Add this macro for false comparison
#define munit_assert_false(condition, message) do { \
    if (condition) { \
        printf("Assertion failed: %s\nExpected: false\nActual: true\n", message); \
        exit(1); \
    } \
} while (0)

// Add this macro for null comparison
#define munit_assert_null(ptr, message) do { \
    if ((ptr) != NULL) { \
        printf("Assertion failed: %s\nExpected: NULL\nActual: %p\n", \
            message, (void*)(ptr)); \
        exit(1); \
    } \
} while (0)

// Add this macro for not null comparison
#define munit_assert_not_null(ptr, message) do { \
    if ((ptr) == NULL) { \
        printf("Assertion failed: %s\nExpected: not NULL\nActual: NULL\n", \
            message); \
        exit(1); \
    } \
} while (0)

// Add this macro for string comparison
#define munit_assert_string_equal(actual, expected, message) do { \
    if (strcmp((actual), (expected)) != 0) { \
        printf("Assertion failed: %s\nExpected: \"%s\"\nActual: \"%s\"\n", \
            message, expected, actual); \
        exit(1); \
    } \
} while (0)

// Add this new macro for integer assertions
#define munit_assert_int(actual, op, expected, message) do { \
    if (!((actual) op (expected))) { \
        printf("Assertion failed: %s\nExpected: %d %s %d\nActual: %d\n", \
            message, actual, #op, expected, actual); \
        exit(1); \
    } \
} while (0)

#define munit_assert_double_equal(actual, expected, message) do { \
    if (fabs((actual) - (expected)) > 0.00001) { \
        printf("Assertion failed: %s\nExpected: %f\nActual: %f\n", \
            message, (double)(expected), (double)(actual)); \
        exit(1); \
    } \
} while (0)

// Pointer assertion - not equal
#define munit_assert_ptr_not_equal(ptr1, ptr2, message) do { \
    if ((ptr1) == (ptr2)) { \
        printf("Assertion failed: %s\nPointers are equal: %p\n", \
            message, (void*)(ptr1)); \
        exit(1); \
    } \
} while (0)

// Pointer assertion - equal
#define munit_assert_ptr_equal(ptr1, ptr2, message) do { \
    if ((ptr1) != (ptr2)) { \
        printf("Assertion failed: %s\nExpected: %p\nActual: %p\n", \
            message, (void*)(ptr2), (void*)(ptr1)); \
        exit(1); \
    } \
} while (0)

// Size comparison macro
#define munit_assert_size(actual, op, expected, message) do { \
    if (!((actual) op (expected))) { \
        printf("Assertion failed: %s\nExpected: %zu %s %zu\n", \
            message, (size_t)(expected), #op, (size_t)(actual)); \
        exit(1); \
    } \
} while (0)

// uint8_t comparison macro
#define munit_assert_uint8(actual, op, expected, message) do { \
    if (!((actual) op (expected))) { \
        printf("Assertion failed: %s\nExpected: 0x%02X %s 0x%02X\n", \
            message, (uint8_t)(expected), #op, (uint8_t)(actual)); \
        exit(1); \
    } \
} while (0)

// uint16_t comparison macro
#define munit_assert_uint16(actual, op, expected, message) do { \
    if (!((actual) op (expected))) { \
        printf("Assertion failed: %s\nExpected: 0x%04X %s 0x%04X\n", \
            message, (uint16_t)(expected), #op, (uint16_t)(actual)); \
        exit(1); \
    } \
} while (0)

// uint32_t comparison macro
#define munit_assert_uint32(actual, op, expected, message) do { \
    if (!((actual) op (expected))) { \
        printf("Assertion failed: %s\nExpected: 0x%08X %s 0x%08X\n", \
            message, (uint32_t)(expected), #op, (uint32_t)(actual)); \
        exit(1); \
    } \
} while (0)

// uint64_t comparison macro
#define munit_assert_uint64(actual, op, expected, message) do { \
    if (!((actual) op (expected))) { \
        printf("Assertion failed: %s\nExpected: 0x%016lX %s 0x%016lX\n", \
            message, (uint64_t)(expected), #op, (uint64_t)(actual)); \
        exit(1); \
    } \
} while (0)

// Test case macros
#define munit_case(type, name, ...) \
    void name(void) { \
        __VA_ARGS__ \
    }

// Test creation helper
#define munit_test(name, func) { name, func }
#define munit_null_test { NULL, NULL }

// Suite creation and runner functions
MunitSuite munit_suite(const char* name, MunitTest* tests);
MunitTest* munit_suite_get_tests(MunitSuite* suite);
int munit_suite_main(MunitSuite* suite, void* user_data, int argc, char* const* argv);

#endif // MUNIT_H
