// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chdb_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chdb_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chdb_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chdb_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chdb_5fapi_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chdb_5fapi_2eproto;
namespace chdb_api {
class Column;
struct ColumnDefaultTypeInternal;
extern ColumnDefaultTypeInternal _Column_default_instance_;
class QueryRequest;
struct QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryResponse;
struct QueryResponseDefaultTypeInternal;
extern QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
class Row;
struct RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
class Value;
struct ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace chdb_api
PROTOBUF_NAMESPACE_OPEN
template<> ::chdb_api::Column* Arena::CreateMaybeMessage<::chdb_api::Column>(Arena*);
template<> ::chdb_api::QueryRequest* Arena::CreateMaybeMessage<::chdb_api::QueryRequest>(Arena*);
template<> ::chdb_api::QueryResponse* Arena::CreateMaybeMessage<::chdb_api::QueryResponse>(Arena*);
template<> ::chdb_api::Row* Arena::CreateMaybeMessage<::chdb_api::Row>(Arena*);
template<> ::chdb_api::Value* Arena::CreateMaybeMessage<::chdb_api::Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chdb_api {

enum QueryRequest_OutputFormat : int {
  QueryRequest_OutputFormat_CSV = 0,
  QueryRequest_OutputFormat_TSV = 1,
  QueryRequest_OutputFormat_JSON = 2,
  QueryRequest_OutputFormat_PRETTY = 3,
  QueryRequest_OutputFormat_COMPACT = 4,
  QueryRequest_OutputFormat_VALUES = 5,
  QueryRequest_OutputFormat_QueryRequest_OutputFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  QueryRequest_OutputFormat_QueryRequest_OutputFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool QueryRequest_OutputFormat_IsValid(int value);
constexpr QueryRequest_OutputFormat QueryRequest_OutputFormat_OutputFormat_MIN = QueryRequest_OutputFormat_CSV;
constexpr QueryRequest_OutputFormat QueryRequest_OutputFormat_OutputFormat_MAX = QueryRequest_OutputFormat_VALUES;
constexpr int QueryRequest_OutputFormat_OutputFormat_ARRAYSIZE = QueryRequest_OutputFormat_OutputFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QueryRequest_OutputFormat_descriptor();
template<typename T>
inline const std::string& QueryRequest_OutputFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, QueryRequest_OutputFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function QueryRequest_OutputFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    QueryRequest_OutputFormat_descriptor(), enum_t_value);
}
inline bool QueryRequest_OutputFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, QueryRequest_OutputFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<QueryRequest_OutputFormat>(
    QueryRequest_OutputFormat_descriptor(), name, value);
}
// ===================================================================

class QueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chdb_api.QueryRequest) */ {
 public:
  inline QueryRequest() : QueryRequest(nullptr) {}
  ~QueryRequest() override;
  explicit PROTOBUF_CONSTEXPR QueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryRequest(const QueryRequest& from);
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryRequest& from) {
    QueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chdb_api.QueryRequest";
  }
  protected:
  explicit QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QueryRequest_OutputFormat OutputFormat;
  static constexpr OutputFormat CSV =
    QueryRequest_OutputFormat_CSV;
  static constexpr OutputFormat TSV =
    QueryRequest_OutputFormat_TSV;
  static constexpr OutputFormat JSON =
    QueryRequest_OutputFormat_JSON;
  static constexpr OutputFormat PRETTY =
    QueryRequest_OutputFormat_PRETTY;
  static constexpr OutputFormat COMPACT =
    QueryRequest_OutputFormat_COMPACT;
  static constexpr OutputFormat VALUES =
    QueryRequest_OutputFormat_VALUES;
  static inline bool OutputFormat_IsValid(int value) {
    return QueryRequest_OutputFormat_IsValid(value);
  }
  static constexpr OutputFormat OutputFormat_MIN =
    QueryRequest_OutputFormat_OutputFormat_MIN;
  static constexpr OutputFormat OutputFormat_MAX =
    QueryRequest_OutputFormat_OutputFormat_MAX;
  static constexpr int OutputFormat_ARRAYSIZE =
    QueryRequest_OutputFormat_OutputFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OutputFormat_descriptor() {
    return QueryRequest_OutputFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& OutputFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OutputFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OutputFormat_Name.");
    return QueryRequest_OutputFormat_Name(enum_t_value);
  }
  static inline bool OutputFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OutputFormat* value) {
    return QueryRequest_OutputFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kFormatFieldNumber = 2,
  };
  // string query = 1;
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // .chdb_api.QueryRequest.OutputFormat format = 2;
  void clear_format();
  ::chdb_api::QueryRequest_OutputFormat format() const;
  void set_format(::chdb_api::QueryRequest_OutputFormat value);
  private:
  ::chdb_api::QueryRequest_OutputFormat _internal_format() const;
  void _internal_set_format(::chdb_api::QueryRequest_OutputFormat value);
  public:

  // @@protoc_insertion_point(class_scope:chdb_api.QueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    int format_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chdb_5fapi_2eproto;
};
// -------------------------------------------------------------------

class QueryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chdb_api.QueryResponse) */ {
 public:
  inline QueryResponse() : QueryResponse(nullptr) {}
  ~QueryResponse() override;
  explicit PROTOBUF_CONSTEXPR QueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryResponse(const QueryResponse& from);
  QueryResponse(QueryResponse&& from) noexcept
    : QueryResponse() {
    *this = ::std::move(from);
  }

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponse& operator=(QueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryResponse*>(
               &_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryResponse& a, QueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryResponse& from) {
    QueryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chdb_api.QueryResponse";
  }
  protected:
  explicit QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowsFieldNumber = 3,
    kColumnsFieldNumber = 4,
    kErrorMessageFieldNumber = 2,
    kRowsReadFieldNumber = 5,
    kBytesReadFieldNumber = 6,
    kElapsedSecondsFieldNumber = 7,
    kSuccessFieldNumber = 1,
  };
  // repeated .chdb_api.Row rows = 3;
  int rows_size() const;
  private:
  int _internal_rows_size() const;
  public:
  void clear_rows();
  ::chdb_api::Row* mutable_rows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Row >*
      mutable_rows();
  private:
  const ::chdb_api::Row& _internal_rows(int index) const;
  ::chdb_api::Row* _internal_add_rows();
  public:
  const ::chdb_api::Row& rows(int index) const;
  ::chdb_api::Row* add_rows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Row >&
      rows() const;

  // repeated .chdb_api.Column columns = 4;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::chdb_api::Column* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Column >*
      mutable_columns();
  private:
  const ::chdb_api::Column& _internal_columns(int index) const;
  ::chdb_api::Column* _internal_add_columns();
  public:
  const ::chdb_api::Column& columns(int index) const;
  ::chdb_api::Column* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Column >&
      columns() const;

  // string error_message = 2;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // int64 rows_read = 5;
  void clear_rows_read();
  int64_t rows_read() const;
  void set_rows_read(int64_t value);
  private:
  int64_t _internal_rows_read() const;
  void _internal_set_rows_read(int64_t value);
  public:

  // int64 bytes_read = 6;
  void clear_bytes_read();
  int64_t bytes_read() const;
  void set_bytes_read(int64_t value);
  private:
  int64_t _internal_bytes_read() const;
  void _internal_set_bytes_read(int64_t value);
  public:

  // double elapsed_seconds = 7;
  void clear_elapsed_seconds();
  double elapsed_seconds() const;
  void set_elapsed_seconds(double value);
  private:
  double _internal_elapsed_seconds() const;
  void _internal_set_elapsed_seconds(double value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chdb_api.QueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Row > rows_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Column > columns_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    int64_t rows_read_;
    int64_t bytes_read_;
    double elapsed_seconds_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chdb_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Column final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chdb_api.Column) */ {
 public:
  inline Column() : Column(nullptr) {}
  ~Column() override;
  explicit PROTOBUF_CONSTEXPR Column(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Column(const Column& from);
  Column(Column&& from) noexcept
    : Column() {
    *this = ::std::move(from);
  }

  inline Column& operator=(const Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline Column& operator=(Column&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Column& default_instance() {
    return *internal_default_instance();
  }
  static inline const Column* internal_default_instance() {
    return reinterpret_cast<const Column*>(
               &_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Column& a, Column& b) {
    a.Swap(&b);
  }
  inline void Swap(Column* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Column>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Column& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Column& from) {
    Column::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Column* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chdb_api.Column";
  }
  protected:
  explicit Column(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:chdb_api.Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chdb_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Row final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chdb_api.Row) */ {
 public:
  inline Row() : Row(nullptr) {}
  ~Row() override;
  explicit PROTOBUF_CONSTEXPR Row(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Row(const Row& from);
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  inline Row& operator=(Row&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Row& default_instance() {
    return *internal_default_instance();
  }
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }
  inline void Swap(Row* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Row* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Row* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Row>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Row& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Row& from) {
    Row::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Row* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chdb_api.Row";
  }
  protected:
  explicit Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .chdb_api.Value values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::chdb_api::Value* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Value >*
      mutable_values();
  private:
  const ::chdb_api::Value& _internal_values(int index) const;
  ::chdb_api::Value* _internal_add_values();
  public:
  const ::chdb_api::Value& values(int index) const;
  ::chdb_api::Value* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Value >&
      values() const;

  // @@protoc_insertion_point(class_scope:chdb_api.Row)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Value > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chdb_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chdb_api.Value) */ {
 public:
  inline Value() : Value(nullptr) {}
  ~Value() override;
  explicit PROTOBUF_CONSTEXPR Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Value& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntValue = 1,
    kUintValue = 2,
    kDoubleValue = 3,
    kStringValue = 4,
    kBoolValue = 5,
    kBytesValue = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Value& from) {
    Value::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chdb_api.Value";
  }
  protected:
  explicit Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsNullFieldNumber = 7,
    kIntValueFieldNumber = 1,
    kUintValueFieldNumber = 2,
    kDoubleValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
    kBoolValueFieldNumber = 5,
    kBytesValueFieldNumber = 6,
  };
  // bool is_null = 7;
  void clear_is_null();
  bool is_null() const;
  void set_is_null(bool value);
  private:
  bool _internal_is_null() const;
  void _internal_set_is_null(bool value);
  public:

  // int64 int_value = 1;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  int64_t int_value() const;
  void set_int_value(int64_t value);
  private:
  int64_t _internal_int_value() const;
  void _internal_set_int_value(int64_t value);
  public:

  // uint64 uint_value = 2;
  bool has_uint_value() const;
  private:
  bool _internal_has_uint_value() const;
  public:
  void clear_uint_value();
  uint64_t uint_value() const;
  void set_uint_value(uint64_t value);
  private:
  uint64_t _internal_uint_value() const;
  void _internal_set_uint_value(uint64_t value);
  public:

  // double double_value = 3;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // string string_value = 4;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bool bool_value = 5;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // bytes bytes_value = 6;
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_value();
  PROTOBUF_NODISCARD std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:chdb_api.Value)
 private:
  class _Internal;
  void set_has_int_value();
  void set_has_uint_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_bytes_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool is_null_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int64_t int_value_;
      uint64_t uint_value_;
      double double_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      bool bool_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chdb_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryRequest

// string query = 1;
inline void QueryRequest::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& QueryRequest::query() const {
  // @@protoc_insertion_point(field_get:chdb_api.QueryRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 _impl_.query_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chdb_api.QueryRequest.query)
}
inline std::string* QueryRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:chdb_api.QueryRequest.query)
  return _s;
}
inline const std::string& QueryRequest::_internal_query() const {
  return _impl_.query_.Get();
}
inline void QueryRequest::_internal_set_query(const std::string& value) {
  
  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryRequest::_internal_mutable_query() {
  
  return _impl_.query_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryRequest::release_query() {
  // @@protoc_insertion_point(field_release:chdb_api.QueryRequest.query)
  return _impl_.query_.Release();
}
inline void QueryRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  _impl_.query_.SetAllocated(query, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.query_.IsDefault()) {
    _impl_.query_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chdb_api.QueryRequest.query)
}

// .chdb_api.QueryRequest.OutputFormat format = 2;
inline void QueryRequest::clear_format() {
  _impl_.format_ = 0;
}
inline ::chdb_api::QueryRequest_OutputFormat QueryRequest::_internal_format() const {
  return static_cast< ::chdb_api::QueryRequest_OutputFormat >(_impl_.format_);
}
inline ::chdb_api::QueryRequest_OutputFormat QueryRequest::format() const {
  // @@protoc_insertion_point(field_get:chdb_api.QueryRequest.format)
  return _internal_format();
}
inline void QueryRequest::_internal_set_format(::chdb_api::QueryRequest_OutputFormat value) {
  
  _impl_.format_ = value;
}
inline void QueryRequest::set_format(::chdb_api::QueryRequest_OutputFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:chdb_api.QueryRequest.format)
}

// -------------------------------------------------------------------

// QueryResponse

// bool success = 1;
inline void QueryResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool QueryResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool QueryResponse::success() const {
  // @@protoc_insertion_point(field_get:chdb_api.QueryResponse.success)
  return _internal_success();
}
inline void QueryResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void QueryResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:chdb_api.QueryResponse.success)
}

// string error_message = 2;
inline void QueryResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& QueryResponse::error_message() const {
  // @@protoc_insertion_point(field_get:chdb_api.QueryResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chdb_api.QueryResponse.error_message)
}
inline std::string* QueryResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:chdb_api.QueryResponse.error_message)
  return _s;
}
inline const std::string& QueryResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void QueryResponse::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryResponse::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:chdb_api.QueryResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void QueryResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chdb_api.QueryResponse.error_message)
}

// repeated .chdb_api.Row rows = 3;
inline int QueryResponse::_internal_rows_size() const {
  return _impl_.rows_.size();
}
inline int QueryResponse::rows_size() const {
  return _internal_rows_size();
}
inline void QueryResponse::clear_rows() {
  _impl_.rows_.Clear();
}
inline ::chdb_api::Row* QueryResponse::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:chdb_api.QueryResponse.rows)
  return _impl_.rows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Row >*
QueryResponse::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:chdb_api.QueryResponse.rows)
  return &_impl_.rows_;
}
inline const ::chdb_api::Row& QueryResponse::_internal_rows(int index) const {
  return _impl_.rows_.Get(index);
}
inline const ::chdb_api::Row& QueryResponse::rows(int index) const {
  // @@protoc_insertion_point(field_get:chdb_api.QueryResponse.rows)
  return _internal_rows(index);
}
inline ::chdb_api::Row* QueryResponse::_internal_add_rows() {
  return _impl_.rows_.Add();
}
inline ::chdb_api::Row* QueryResponse::add_rows() {
  ::chdb_api::Row* _add = _internal_add_rows();
  // @@protoc_insertion_point(field_add:chdb_api.QueryResponse.rows)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Row >&
QueryResponse::rows() const {
  // @@protoc_insertion_point(field_list:chdb_api.QueryResponse.rows)
  return _impl_.rows_;
}

// repeated .chdb_api.Column columns = 4;
inline int QueryResponse::_internal_columns_size() const {
  return _impl_.columns_.size();
}
inline int QueryResponse::columns_size() const {
  return _internal_columns_size();
}
inline void QueryResponse::clear_columns() {
  _impl_.columns_.Clear();
}
inline ::chdb_api::Column* QueryResponse::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:chdb_api.QueryResponse.columns)
  return _impl_.columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Column >*
QueryResponse::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:chdb_api.QueryResponse.columns)
  return &_impl_.columns_;
}
inline const ::chdb_api::Column& QueryResponse::_internal_columns(int index) const {
  return _impl_.columns_.Get(index);
}
inline const ::chdb_api::Column& QueryResponse::columns(int index) const {
  // @@protoc_insertion_point(field_get:chdb_api.QueryResponse.columns)
  return _internal_columns(index);
}
inline ::chdb_api::Column* QueryResponse::_internal_add_columns() {
  return _impl_.columns_.Add();
}
inline ::chdb_api::Column* QueryResponse::add_columns() {
  ::chdb_api::Column* _add = _internal_add_columns();
  // @@protoc_insertion_point(field_add:chdb_api.QueryResponse.columns)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Column >&
QueryResponse::columns() const {
  // @@protoc_insertion_point(field_list:chdb_api.QueryResponse.columns)
  return _impl_.columns_;
}

// int64 rows_read = 5;
inline void QueryResponse::clear_rows_read() {
  _impl_.rows_read_ = int64_t{0};
}
inline int64_t QueryResponse::_internal_rows_read() const {
  return _impl_.rows_read_;
}
inline int64_t QueryResponse::rows_read() const {
  // @@protoc_insertion_point(field_get:chdb_api.QueryResponse.rows_read)
  return _internal_rows_read();
}
inline void QueryResponse::_internal_set_rows_read(int64_t value) {
  
  _impl_.rows_read_ = value;
}
inline void QueryResponse::set_rows_read(int64_t value) {
  _internal_set_rows_read(value);
  // @@protoc_insertion_point(field_set:chdb_api.QueryResponse.rows_read)
}

// int64 bytes_read = 6;
inline void QueryResponse::clear_bytes_read() {
  _impl_.bytes_read_ = int64_t{0};
}
inline int64_t QueryResponse::_internal_bytes_read() const {
  return _impl_.bytes_read_;
}
inline int64_t QueryResponse::bytes_read() const {
  // @@protoc_insertion_point(field_get:chdb_api.QueryResponse.bytes_read)
  return _internal_bytes_read();
}
inline void QueryResponse::_internal_set_bytes_read(int64_t value) {
  
  _impl_.bytes_read_ = value;
}
inline void QueryResponse::set_bytes_read(int64_t value) {
  _internal_set_bytes_read(value);
  // @@protoc_insertion_point(field_set:chdb_api.QueryResponse.bytes_read)
}

// double elapsed_seconds = 7;
inline void QueryResponse::clear_elapsed_seconds() {
  _impl_.elapsed_seconds_ = 0;
}
inline double QueryResponse::_internal_elapsed_seconds() const {
  return _impl_.elapsed_seconds_;
}
inline double QueryResponse::elapsed_seconds() const {
  // @@protoc_insertion_point(field_get:chdb_api.QueryResponse.elapsed_seconds)
  return _internal_elapsed_seconds();
}
inline void QueryResponse::_internal_set_elapsed_seconds(double value) {
  
  _impl_.elapsed_seconds_ = value;
}
inline void QueryResponse::set_elapsed_seconds(double value) {
  _internal_set_elapsed_seconds(value);
  // @@protoc_insertion_point(field_set:chdb_api.QueryResponse.elapsed_seconds)
}

// -------------------------------------------------------------------

// Column

// string name = 1;
inline void Column::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Column::name() const {
  // @@protoc_insertion_point(field_get:chdb_api.Column.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Column::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chdb_api.Column.name)
}
inline std::string* Column::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chdb_api.Column.name)
  return _s;
}
inline const std::string& Column::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Column::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Column::release_name() {
  // @@protoc_insertion_point(field_release:chdb_api.Column.name)
  return _impl_.name_.Release();
}
inline void Column::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chdb_api.Column.name)
}

// string type = 2;
inline void Column::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Column::type() const {
  // @@protoc_insertion_point(field_get:chdb_api.Column.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Column::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chdb_api.Column.type)
}
inline std::string* Column::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:chdb_api.Column.type)
  return _s;
}
inline const std::string& Column::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Column::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Column::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Column::release_type() {
  // @@protoc_insertion_point(field_release:chdb_api.Column.type)
  return _impl_.type_.Release();
}
inline void Column::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chdb_api.Column.type)
}

// -------------------------------------------------------------------

// Row

// repeated .chdb_api.Value values = 1;
inline int Row::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int Row::values_size() const {
  return _internal_values_size();
}
inline void Row::clear_values() {
  _impl_.values_.Clear();
}
inline ::chdb_api::Value* Row::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:chdb_api.Row.values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Value >*
Row::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:chdb_api.Row.values)
  return &_impl_.values_;
}
inline const ::chdb_api::Value& Row::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::chdb_api::Value& Row::values(int index) const {
  // @@protoc_insertion_point(field_get:chdb_api.Row.values)
  return _internal_values(index);
}
inline ::chdb_api::Value* Row::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::chdb_api::Value* Row::add_values() {
  ::chdb_api::Value* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:chdb_api.Row.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chdb_api::Value >&
Row::values() const {
  // @@protoc_insertion_point(field_list:chdb_api.Row.values)
  return _impl_.values_;
}

// -------------------------------------------------------------------

// Value

// int64 int_value = 1;
inline bool Value::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline bool Value::has_int_value() const {
  return _internal_has_int_value();
}
inline void Value::set_has_int_value() {
  _impl_._oneof_case_[0] = kIntValue;
}
inline void Value::clear_int_value() {
  if (_internal_has_int_value()) {
    _impl_.value_.int_value_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t Value::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return _impl_.value_.int_value_;
  }
  return int64_t{0};
}
inline void Value::_internal_set_int_value(int64_t value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
}
inline int64_t Value::int_value() const {
  // @@protoc_insertion_point(field_get:chdb_api.Value.int_value)
  return _internal_int_value();
}
inline void Value::set_int_value(int64_t value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:chdb_api.Value.int_value)
}

// uint64 uint_value = 2;
inline bool Value::_internal_has_uint_value() const {
  return value_case() == kUintValue;
}
inline bool Value::has_uint_value() const {
  return _internal_has_uint_value();
}
inline void Value::set_has_uint_value() {
  _impl_._oneof_case_[0] = kUintValue;
}
inline void Value::clear_uint_value() {
  if (_internal_has_uint_value()) {
    _impl_.value_.uint_value_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t Value::_internal_uint_value() const {
  if (_internal_has_uint_value()) {
    return _impl_.value_.uint_value_;
  }
  return uint64_t{0u};
}
inline void Value::_internal_set_uint_value(uint64_t value) {
  if (!_internal_has_uint_value()) {
    clear_value();
    set_has_uint_value();
  }
  _impl_.value_.uint_value_ = value;
}
inline uint64_t Value::uint_value() const {
  // @@protoc_insertion_point(field_get:chdb_api.Value.uint_value)
  return _internal_uint_value();
}
inline void Value::set_uint_value(uint64_t value) {
  _internal_set_uint_value(value);
  // @@protoc_insertion_point(field_set:chdb_api.Value.uint_value)
}

// double double_value = 3;
inline bool Value::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline bool Value::has_double_value() const {
  return _internal_has_double_value();
}
inline void Value::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void Value::clear_double_value() {
  if (_internal_has_double_value()) {
    _impl_.value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double Value::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return _impl_.value_.double_value_;
  }
  return 0;
}
inline void Value::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  _impl_.value_.double_value_ = value;
}
inline double Value::double_value() const {
  // @@protoc_insertion_point(field_get:chdb_api.Value.double_value)
  return _internal_double_value();
}
inline void Value::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:chdb_api.Value.double_value)
}

// string string_value = 4;
inline bool Value::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline bool Value::has_string_value() const {
  return _internal_has_string_value();
}
inline void Value::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void Value::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& Value::string_value() const {
  // @@protoc_insertion_point(field_get:chdb_api.Value.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Value::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chdb_api.Value.string_value)
}
inline std::string* Value::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:chdb_api.Value.string_value)
  return _s;
}
inline const std::string& Value::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Value::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Value::release_string_value() {
  // @@protoc_insertion_point(field_release:chdb_api.Value.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return _impl_.value_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:chdb_api.Value.string_value)
}

// bool bool_value = 5;
inline bool Value::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline bool Value::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void Value::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void Value::clear_bool_value() {
  if (_internal_has_bool_value()) {
    _impl_.value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool Value::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return _impl_.value_.bool_value_;
  }
  return false;
}
inline void Value::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  _impl_.value_.bool_value_ = value;
}
inline bool Value::bool_value() const {
  // @@protoc_insertion_point(field_get:chdb_api.Value.bool_value)
  return _internal_bool_value();
}
inline void Value::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:chdb_api.Value.bool_value)
}

// bytes bytes_value = 6;
inline bool Value::_internal_has_bytes_value() const {
  return value_case() == kBytesValue;
}
inline bool Value::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void Value::set_has_bytes_value() {
  _impl_._oneof_case_[0] = kBytesValue;
}
inline void Value::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    _impl_.value_.bytes_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& Value::bytes_value() const {
  // @@protoc_insertion_point(field_get:chdb_api.Value.bytes_value)
  return _internal_bytes_value();
}
template <typename ArgT0, typename... ArgT>
inline void Value::set_bytes_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    _impl_.value_.bytes_value_.InitDefault();
  }
  _impl_.value_.bytes_value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chdb_api.Value.bytes_value)
}
inline std::string* Value::mutable_bytes_value() {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:chdb_api.Value.bytes_value)
  return _s;
}
inline const std::string& Value::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return _impl_.value_.bytes_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    _impl_.value_.bytes_value_.InitDefault();
  }
  _impl_.value_.bytes_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Value::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_value();
    set_has_bytes_value();
    _impl_.value_.bytes_value_.InitDefault();
  }
  return _impl_.value_.bytes_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Value::release_bytes_value() {
  // @@protoc_insertion_point(field_release:chdb_api.Value.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_value();
    return _impl_.value_.bytes_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_value()) {
    clear_value();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    _impl_.value_.bytes_value_.InitAllocated(bytes_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:chdb_api.Value.bytes_value)
}

// bool is_null = 7;
inline void Value::clear_is_null() {
  _impl_.is_null_ = false;
}
inline bool Value::_internal_is_null() const {
  return _impl_.is_null_;
}
inline bool Value::is_null() const {
  // @@protoc_insertion_point(field_get:chdb_api.Value.is_null)
  return _internal_is_null();
}
inline void Value::_internal_set_is_null(bool value) {
  
  _impl_.is_null_ = value;
}
inline void Value::set_is_null(bool value) {
  _internal_set_is_null(value);
  // @@protoc_insertion_point(field_set:chdb_api.Value.is_null)
}

inline bool Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Value::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline Value::ValueCase Value::value_case() const {
  return Value::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chdb_api

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chdb_api::QueryRequest_OutputFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chdb_api::QueryRequest_OutputFormat>() {
  return ::chdb_api::QueryRequest_OutputFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chdb_5fapi_2eproto
